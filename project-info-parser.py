import time
import os
import pandas as pd
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
INPUT_FILE = "rscf_projects_2024.xlsx"
OUTPUT_FILE = "rscf_projects_2024_enriched.xlsx"  # –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–≤—ã—Ö 10
BASE_URL = "https://rscf.ru/project/"
MAX_PROJECTS = None  # <-- –¢–µ—Å—Ç–æ–≤—ã–π –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å: –î–ª—è –ø—Ä–æ–≤—Ä–µ–∫–∏ –ø–∞—Ä—Å–≤–µ—Ä–∞ –Ω–∞ 10 –ø—Ä–æ–µ–∫—Ç–∞—Ö - —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ 10

# –°—Ç–∞–≤–∏–º –Ω—É–∂–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Selenium
options = Options()
options.add_argument("--headless")
options.add_argument("--disable-gpu")
options.add_argument("--no-sandbox")

driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
wait = WebDriverWait(driver, 20)

# –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ–µ–∫—Ç–∞, –≤—ã—Ç–∞—Å–∫–∏–≤–∞—è –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –û–±–ª–∞—Å—Ç—å –∑–Ω–∞–Ω–∏—è, –ö–æ–¥ –ì–†–ù–¢–ò
def parse_project_info(project_id):
    url = BASE_URL + project_id + '/'
    try:
        driver.get(url)
        wait.until(EC.presence_of_element_located((By.CLASS_NAME, "fld_title")))
        time.sleep(1)

        soup = BeautifulSoup(driver.page_source, "html.parser")

        keywords = ""
        grnti = ""
        area = ""

        for p in soup.find_all("p"):
            label = p.find("span", class_="fld_title")
            if not label:
                continue
            label_text = label.get_text(strip=True)
            value = p.get_text(strip=True).replace(label_text, "").strip()

            if label_text == "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞":
                keywords = value
            elif label_text == "–ö–æ–¥ –ì–†–ù–¢–ò":
                grnti = value
            elif "–û–±–ª–∞—Å—Ç—å –∑–Ω–∞–Ω–∏—è" in label_text:
                area = value

        if not keywords and not grnti and not area:
            print(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É {project_id}")
            print(f"   –°—Ç—Ä–∞–Ω–∏—Ü–∞: {url}")

        return keywords, grnti, area

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {project_id}: {e}")
        return "", "", ""


def main():
    if not os.path.exists(INPUT_FILE):
        print(f"‚ùå –§–∞–π–ª {INPUT_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    df = pd.read_excel(INPUT_FILE)

    for col in ["–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", "–ö–æ–¥ –ì–†–ù–¢–ò", "–û–±–ª–∞—Å—Ç—å –∑–Ω–∞–Ω–∏—è, –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞"]:
        if col not in df.columns:
            df[col] = ""

    total = len(df)
    print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ (–≤—Å–µ–≥–æ –≤ —Ç–∞–±–ª–∏—Ü–µ: {total})")

    count = 0
    for i, row in df.iterrows():
        if MAX_PROJECTS is not None and count >= MAX_PROJECTS:
            break

        project_id = str(row["–ù–æ–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞"]).strip()
        if not project_id:
            continue

        print(f"[{count + 1}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: {project_id}")
        keywords, grnti, area = parse_project_info(project_id)

        df.at[i, "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"] = keywords
        df.at[i, "–ö–æ–¥ –ì–†–ù–¢–ò"] = grnti
        df.at[i, "–û–±–ª–∞—Å—Ç—å –∑–Ω–∞–Ω–∏—è, –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞"] = area

        count += 1
        time.sleep(1.5)

    df.to_excel(OUTPUT_FILE, index=False)
    print(f"\n‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {OUTPUT_FILE} (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {count} –ø—Ä–æ–µ–∫—Ç–æ–≤)")


if __name__ == "__main__":
    main()
    driver.quit()
